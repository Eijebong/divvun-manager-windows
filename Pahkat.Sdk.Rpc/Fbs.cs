// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using Pahkat.Sdk.Rpc.Models;

namespace Pahkat.Sdk.Rpc.Fbs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public enum WindowsExecutableFlag : byte
{
  TargetSystem = 0,
  TargetUser = 1,
  RequiresRebootOnUpdate = 32,
  RequiresRebootOnUninstall = 64,
  RequiresRebootOnInstall = 128,
};

public enum WindowsExecutableKind : byte
{
  NONE = 0,
  Msi = 1,
  Inno = 2,
  Nsis = 3,
};

public enum MacOSPackageFlag : byte
{
  TargetSystem = 0,
  TargetUser = 1,
  RequiresRebootOnUpdate = 32,
  RequiresRebootOnUninstall = 64,
  RequiresRebootOnInstall = 128,
};

public enum Payload : byte
{
  NONE = 0,
  WindowsExecutable = 1,
  MacOSPackage = 2,
  TarballPackage = 3,
};

public enum Package : byte
{
  NONE = 0,
  Descriptor = 1,
  Synthetic = 2,
  Redirect = 3,
};

public struct WindowsExecutable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static WindowsExecutable GetRootAsWindowsExecutable(ByteBuffer _bb) { return GetRootAsWindowsExecutable(_bb, new WindowsExecutable()); }
  public static WindowsExecutable GetRootAsWindowsExecutable(ByteBuffer _bb, WindowsExecutable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WindowsExecutable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }
  public string ProductCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetProductCodeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetProductCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetProductCodeArray() { return __p.__vector_as_array<byte>(6); }
  public ulong Size { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong InstalledSize { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte Flags { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public Pahkat.Sdk.Rpc.Fbs.WindowsExecutableKind Kind { get { int o = __p.__offset(14); return o != 0 ? (Pahkat.Sdk.Rpc.Fbs.WindowsExecutableKind)__p.bb.Get(o + __p.bb_pos) : Pahkat.Sdk.Rpc.Fbs.WindowsExecutableKind.NONE; } }
  public string Args { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArgsBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetArgsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetArgsArray() { return __p.__vector_as_array<byte>(16); }
  public string UninstallArgs { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUninstallArgsBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetUninstallArgsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetUninstallArgsArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.WindowsExecutable> CreateWindowsExecutable(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset),
      StringOffset product_codeOffset = default(StringOffset),
      ulong size = 0,
      ulong installed_size = 0,
      byte flags = 0,
      Pahkat.Sdk.Rpc.Fbs.WindowsExecutableKind kind = Pahkat.Sdk.Rpc.Fbs.WindowsExecutableKind.NONE,
      StringOffset argsOffset = default(StringOffset),
      StringOffset uninstall_argsOffset = default(StringOffset)) {
    builder.StartTable(8);
    WindowsExecutable.AddInstalledSize(builder, installed_size);
    WindowsExecutable.AddSize(builder, size);
    WindowsExecutable.AddUninstallArgs(builder, uninstall_argsOffset);
    WindowsExecutable.AddArgs(builder, argsOffset);
    WindowsExecutable.AddProductCode(builder, product_codeOffset);
    WindowsExecutable.AddUrl(builder, urlOffset);
    WindowsExecutable.AddKind(builder, kind);
    WindowsExecutable.AddFlags(builder, flags);
    return WindowsExecutable.EndWindowsExecutable(builder);
  }

  public static void StartWindowsExecutable(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static void AddProductCode(FlatBufferBuilder builder, StringOffset productCodeOffset) { builder.AddOffset(1, productCodeOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, ulong size) { builder.AddUlong(2, size, 0); }
  public static void AddInstalledSize(FlatBufferBuilder builder, ulong installedSize) { builder.AddUlong(3, installedSize, 0); }
  public static void AddFlags(FlatBufferBuilder builder, byte flags) { builder.AddByte(4, flags, 0); }
  public static void AddKind(FlatBufferBuilder builder, Pahkat.Sdk.Rpc.Fbs.WindowsExecutableKind kind) { builder.AddByte(5, (byte)kind, 0); }
  public static void AddArgs(FlatBufferBuilder builder, StringOffset argsOffset) { builder.AddOffset(6, argsOffset.Value, 0); }
  public static void AddUninstallArgs(FlatBufferBuilder builder, StringOffset uninstallArgsOffset) { builder.AddOffset(7, uninstallArgsOffset.Value, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.WindowsExecutable> EndWindowsExecutable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // url
    builder.Required(o, 6);  // product_code
    return new Offset<Pahkat.Sdk.Rpc.Fbs.WindowsExecutable>(o);
  }
};

public struct MacOSPackage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static MacOSPackage GetRootAsMacOSPackage(ByteBuffer _bb) { return GetRootAsMacOSPackage(_bb, new MacOSPackage()); }
  public static MacOSPackage GetRootAsMacOSPackage(ByteBuffer _bb, MacOSPackage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MacOSPackage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }
  public string PkgId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPkgIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPkgIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPkgIdArray() { return __p.__vector_as_array<byte>(6); }
  public ulong Size { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong InstalledSize { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte Flags { get { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.MacOSPackage> CreateMacOSPackage(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset),
      StringOffset pkg_idOffset = default(StringOffset),
      ulong size = 0,
      ulong installed_size = 0,
      byte flags = 0) {
    builder.StartTable(5);
    MacOSPackage.AddInstalledSize(builder, installed_size);
    MacOSPackage.AddSize(builder, size);
    MacOSPackage.AddPkgId(builder, pkg_idOffset);
    MacOSPackage.AddUrl(builder, urlOffset);
    MacOSPackage.AddFlags(builder, flags);
    return MacOSPackage.EndMacOSPackage(builder);
  }

  public static void StartMacOSPackage(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static void AddPkgId(FlatBufferBuilder builder, StringOffset pkgIdOffset) { builder.AddOffset(1, pkgIdOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, ulong size) { builder.AddUlong(2, size, 0); }
  public static void AddInstalledSize(FlatBufferBuilder builder, ulong installedSize) { builder.AddUlong(3, installedSize, 0); }
  public static void AddFlags(FlatBufferBuilder builder, byte flags) { builder.AddByte(4, flags, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.MacOSPackage> EndMacOSPackage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // url
    builder.Required(o, 6);  // pkg_id
    return new Offset<Pahkat.Sdk.Rpc.Fbs.MacOSPackage>(o);
  }
};

public struct TarballPackage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static TarballPackage GetRootAsTarballPackage(ByteBuffer _bb) { return GetRootAsTarballPackage(_bb, new TarballPackage()); }
  public static TarballPackage GetRootAsTarballPackage(ByteBuffer _bb, TarballPackage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TarballPackage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }
  public ulong Size { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong InstalledSize { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.TarballPackage> CreateTarballPackage(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset),
      ulong size = 0,
      ulong installed_size = 0) {
    builder.StartTable(3);
    TarballPackage.AddInstalledSize(builder, installed_size);
    TarballPackage.AddSize(builder, size);
    TarballPackage.AddUrl(builder, urlOffset);
    return TarballPackage.EndTarballPackage(builder);
  }

  public static void StartTarballPackage(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, ulong size) { builder.AddUlong(1, size, 0); }
  public static void AddInstalledSize(FlatBufferBuilder builder, ulong installedSize) { builder.AddUlong(2, installedSize, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.TarballPackage> EndTarballPackage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // url
    return new Offset<Pahkat.Sdk.Rpc.Fbs.TarballPackage>(o);
  }
};

public partial struct Target : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Target GetRootAsTarget(ByteBuffer _bb) { return GetRootAsTarget(_bb, new Target()); }
  public static Target GetRootAsTarget(ByteBuffer _bb, Target obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Target __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Platform { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatformBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPlatformBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPlatformArray() { return __p.__vector_as_array<byte>(4); }
  public Pahkat.Sdk.Rpc.Fbs.Payload PayloadType { get { int o = __p.__offset(6); return o != 0 ? (Pahkat.Sdk.Rpc.Fbs.Payload)__p.bb.Get(o + __p.bb_pos) : Pahkat.Sdk.Rpc.Fbs.Payload.NONE; } }
  public TTable? Payload<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }
  public string DependenciesKeys(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DependenciesKeysLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string DependenciesValues(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DependenciesValuesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Arch { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArchBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetArchBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetArchArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.Target> CreateTarget(FlatBufferBuilder builder,
      StringOffset platformOffset = default(StringOffset),
      Pahkat.Sdk.Rpc.Fbs.Payload payload_type = Pahkat.Sdk.Rpc.Fbs.Payload.NONE,
      int payloadOffset = 0,
      VectorOffset dependencies_keysOffset = default(VectorOffset),
      VectorOffset dependencies_valuesOffset = default(VectorOffset),
      StringOffset archOffset = default(StringOffset)) {
    builder.StartTable(6);
    Target.AddArch(builder, archOffset);
    Target.AddDependenciesValues(builder, dependencies_valuesOffset);
    Target.AddDependenciesKeys(builder, dependencies_keysOffset);
    Target.AddPayload(builder, payloadOffset);
    Target.AddPlatform(builder, platformOffset);
    Target.AddPayloadType(builder, payload_type);
    return Target.EndTarget(builder);
  }

  public static void StartTarget(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPlatform(FlatBufferBuilder builder, StringOffset platformOffset) { builder.AddOffset(0, platformOffset.Value, 0); }
  public static void AddPayloadType(FlatBufferBuilder builder, Pahkat.Sdk.Rpc.Fbs.Payload payloadType) { builder.AddByte(1, (byte)payloadType, 0); }
  public static void AddPayload(FlatBufferBuilder builder, int payloadOffset) { builder.AddOffset(2, payloadOffset, 0); }
  public static void AddDependenciesKeys(FlatBufferBuilder builder, VectorOffset dependenciesKeysOffset) { builder.AddOffset(3, dependenciesKeysOffset.Value, 0); }
  public static VectorOffset CreateDependenciesKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDependenciesKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDependenciesKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDependenciesValues(FlatBufferBuilder builder, VectorOffset dependenciesValuesOffset) { builder.AddOffset(4, dependenciesValuesOffset.Value, 0); }
  public static VectorOffset CreateDependenciesValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDependenciesValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDependenciesValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddArch(FlatBufferBuilder builder, StringOffset archOffset) { builder.AddOffset(5, archOffset.Value, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.Target> EndTarget(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // platform
    builder.Required(o, 8);  // payload
    return new Offset<Pahkat.Sdk.Rpc.Fbs.Target>(o);
  }
};

public partial struct Release : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Release GetRootAsRelease(ByteBuffer _bb) { return GetRootAsRelease(_bb, new Release()); }
  public static Release GetRootAsRelease(ByteBuffer _bb, Release obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Release __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte VersionType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string Version { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVersionBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetVersionBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetVersionArray() { return __p.__vector_as_array<byte>(6); }
  public Pahkat.Sdk.Rpc.Fbs.Target? Target(int j) { int o = __p.__offset(8); return o != 0 ? (Pahkat.Sdk.Rpc.Fbs.Target?)(new Pahkat.Sdk.Rpc.Fbs.Target()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TargetLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Channel { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetChannelBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetChannelArray() { return __p.__vector_as_array<byte>(10); }
  public string Authors(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AuthorsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string License { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLicenseBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLicenseBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLicenseArray() { return __p.__vector_as_array<byte>(14); }
  public string LicenseUrl { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLicenseUrlBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLicenseUrlBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLicenseUrlArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.Release> CreateRelease(FlatBufferBuilder builder,
      byte version_type = 0,
      StringOffset versionOffset = default(StringOffset),
      VectorOffset targetOffset = default(VectorOffset),
      StringOffset channelOffset = default(StringOffset),
      VectorOffset authorsOffset = default(VectorOffset),
      StringOffset licenseOffset = default(StringOffset),
      StringOffset license_urlOffset = default(StringOffset)) {
    builder.StartTable(7);
    Release.AddLicenseUrl(builder, license_urlOffset);
    Release.AddLicense(builder, licenseOffset);
    Release.AddAuthors(builder, authorsOffset);
    Release.AddChannel(builder, channelOffset);
    Release.AddTarget(builder, targetOffset);
    Release.AddVersion(builder, versionOffset);
    Release.AddVersionType(builder, version_type);
    return Release.EndRelease(builder);
  }

  public static void StartRelease(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddVersionType(FlatBufferBuilder builder, byte versionType) { builder.AddByte(0, versionType, 0); }
  public static void AddVersion(FlatBufferBuilder builder, StringOffset versionOffset) { builder.AddOffset(1, versionOffset.Value, 0); }
  public static void AddTarget(FlatBufferBuilder builder, VectorOffset targetOffset) { builder.AddOffset(2, targetOffset.Value, 0); }
  public static VectorOffset CreateTargetVector(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Target>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTargetVectorBlock(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Target>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTargetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChannel(FlatBufferBuilder builder, StringOffset channelOffset) { builder.AddOffset(3, channelOffset.Value, 0); }
  public static void AddAuthors(FlatBufferBuilder builder, VectorOffset authorsOffset) { builder.AddOffset(4, authorsOffset.Value, 0); }
  public static VectorOffset CreateAuthorsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAuthorsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAuthorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLicense(FlatBufferBuilder builder, StringOffset licenseOffset) { builder.AddOffset(5, licenseOffset.Value, 0); }
  public static void AddLicenseUrl(FlatBufferBuilder builder, StringOffset licenseUrlOffset) { builder.AddOffset(6, licenseUrlOffset.Value, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.Release> EndRelease(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // version
    return new Offset<Pahkat.Sdk.Rpc.Fbs.Release>(o);
  }
};

public partial struct Descriptor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Descriptor GetRootAsDescriptor(ByteBuffer _bb) { return GetRootAsDescriptor(_bb, new Descriptor()); }
  public static Descriptor GetRootAsDescriptor(ByteBuffer _bb, Descriptor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Descriptor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public Pahkat.Sdk.Rpc.Fbs.Release? Release(int j) { int o = __p.__offset(6); return o != 0 ? (Pahkat.Sdk.Rpc.Fbs.Release?)(new Pahkat.Sdk.Rpc.Fbs.Release()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ReleaseLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string NameKeys(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NameKeysLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string NameValues(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int NameValuesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string DescriptionKeys(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DescriptionKeysLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string DescriptionValues(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DescriptionValuesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Tags(int j) { int o = __p.__offset(16); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.Descriptor> CreateDescriptor(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      VectorOffset releaseOffset = default(VectorOffset),
      VectorOffset name_keysOffset = default(VectorOffset),
      VectorOffset name_valuesOffset = default(VectorOffset),
      VectorOffset description_keysOffset = default(VectorOffset),
      VectorOffset description_valuesOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset)) {
    builder.StartTable(7);
    Descriptor.AddTags(builder, tagsOffset);
    Descriptor.AddDescriptionValues(builder, description_valuesOffset);
    Descriptor.AddDescriptionKeys(builder, description_keysOffset);
    Descriptor.AddNameValues(builder, name_valuesOffset);
    Descriptor.AddNameKeys(builder, name_keysOffset);
    Descriptor.AddRelease(builder, releaseOffset);
    Descriptor.AddId(builder, idOffset);
    return Descriptor.EndDescriptor(builder);
  }

  public static void StartDescriptor(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddRelease(FlatBufferBuilder builder, VectorOffset releaseOffset) { builder.AddOffset(1, releaseOffset.Value, 0); }
  public static VectorOffset CreateReleaseVector(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Release>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateReleaseVectorBlock(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Release>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReleaseVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNameKeys(FlatBufferBuilder builder, VectorOffset nameKeysOffset) { builder.AddOffset(2, nameKeysOffset.Value, 0); }
  public static VectorOffset CreateNameKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNameKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNameKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNameValues(FlatBufferBuilder builder, VectorOffset nameValuesOffset) { builder.AddOffset(3, nameValuesOffset.Value, 0); }
  public static VectorOffset CreateNameValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNameValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNameValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionKeys(FlatBufferBuilder builder, VectorOffset descriptionKeysOffset) { builder.AddOffset(4, descriptionKeysOffset.Value, 0); }
  public static VectorOffset CreateDescriptionKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDescriptionKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDescriptionKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescriptionValues(FlatBufferBuilder builder, VectorOffset descriptionValuesOffset) { builder.AddOffset(5, descriptionValuesOffset.Value, 0); }
  public static VectorOffset CreateDescriptionValuesVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDescriptionValuesVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDescriptionValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(6, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.Descriptor> EndDescriptor(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // id
    return new Offset<Pahkat.Sdk.Rpc.Fbs.Descriptor>(o);
  }
};

public struct Synthetic : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Synthetic GetRootAsSynthetic(ByteBuffer _bb) { return GetRootAsSynthetic(_bb, new Synthetic()); }
  public static Synthetic GetRootAsSynthetic(ByteBuffer _bb, Synthetic obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Synthetic __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Todo { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.Synthetic> CreateSynthetic(FlatBufferBuilder builder,
      byte todo = 0) {
    builder.StartTable(1);
    Synthetic.AddTodo(builder, todo);
    return Synthetic.EndSynthetic(builder);
  }

  public static void StartSynthetic(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTodo(FlatBufferBuilder builder, byte todo) { builder.AddByte(0, todo, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.Synthetic> EndSynthetic(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Pahkat.Sdk.Rpc.Fbs.Synthetic>(o);
  }
};

public struct Redirect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Redirect GetRootAsRedirect(ByteBuffer _bb) { return GetRootAsRedirect(_bb, new Redirect()); }
  public static Redirect GetRootAsRedirect(ByteBuffer _bb, Redirect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Redirect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Url { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUrlBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetUrlBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetUrlArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.Redirect> CreateRedirect(FlatBufferBuilder builder,
      StringOffset urlOffset = default(StringOffset)) {
    builder.StartTable(1);
    Redirect.AddUrl(builder, urlOffset);
    return Redirect.EndRedirect(builder);
  }

  public static void StartRedirect(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUrl(FlatBufferBuilder builder, StringOffset urlOffset) { builder.AddOffset(0, urlOffset.Value, 0); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.Redirect> EndRedirect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // url
    return new Offset<Pahkat.Sdk.Rpc.Fbs.Redirect>(o);
  }
};

public partial struct Packages : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static Packages GetRootAsPackages(ByteBuffer _bb) { return GetRootAsPackages(_bb, new Packages()); }
  public static Packages GetRootAsPackages(ByteBuffer _bb, Packages obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Packages __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PackagesKeys(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PackagesKeysLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public byte PackagesValuesTypes(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int PackagesValuesTypesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPackagesValuesTypesBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPackagesValuesTypesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPackagesValuesTypesArray() { return __p.__vector_as_array<byte>(6); }
  public Pahkat.Sdk.Rpc.Fbs.Descriptor? PackagesValues(int j) { int o = __p.__offset(8); return o != 0 ? (Pahkat.Sdk.Rpc.Fbs.Descriptor?)(new Pahkat.Sdk.Rpc.Fbs.Descriptor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PackagesValuesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Pahkat.Sdk.Rpc.Fbs.Packages> CreatePackages(FlatBufferBuilder builder,
      VectorOffset packages_keysOffset = default(VectorOffset),
      VectorOffset packages_values_typesOffset = default(VectorOffset),
      VectorOffset packages_valuesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Packages.AddPackagesValues(builder, packages_valuesOffset);
    Packages.AddPackagesValuesTypes(builder, packages_values_typesOffset);
    Packages.AddPackagesKeys(builder, packages_keysOffset);
    return Packages.EndPackages(builder);
  }

  public static void StartPackages(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPackagesKeys(FlatBufferBuilder builder, VectorOffset packagesKeysOffset) { builder.AddOffset(0, packagesKeysOffset.Value, 0); }
  public static VectorOffset CreatePackagesKeysVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePackagesKeysVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPackagesKeysVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPackagesValuesTypes(FlatBufferBuilder builder, VectorOffset packagesValuesTypesOffset) { builder.AddOffset(1, packagesValuesTypesOffset.Value, 0); }
  public static VectorOffset CreatePackagesValuesTypesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePackagesValuesTypesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartPackagesValuesTypesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPackagesValues(FlatBufferBuilder builder, VectorOffset packagesValuesOffset) { builder.AddOffset(2, packagesValuesOffset.Value, 0); }
  public static VectorOffset CreatePackagesValuesVector(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Descriptor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePackagesValuesVectorBlock(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Descriptor>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPackagesValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Pahkat.Sdk.Rpc.Fbs.Packages> EndPackages(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Pahkat.Sdk.Rpc.Fbs.Packages>(o);
  }
  public static void FinishPackagesBuffer(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Packages> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPackagesBuffer(FlatBufferBuilder builder, Offset<Pahkat.Sdk.Rpc.Fbs.Packages> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
